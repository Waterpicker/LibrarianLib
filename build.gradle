plugins {
    id("fabric-loom") version "0.5-SNAPSHOT"
    id "org.jetbrains.kotlin.jvm" version "$kotlin_version"
}

import net.fabricmc.loom.task.RunClientTask
import net.fabricmc.loom.task.RunServerTask


allprojects {
    apply plugin: "fabric-loom"
    apply plugin: "org.jetbrains.kotlin.jvm"

    tasks.withType(JavaCompile).configureEach {
        def targetVersion = 8
        if (JavaVersion.current().isJava9Compatible()) {
            it.options.release = targetVersion
        } else {
            sourceCompatibility = JavaVersion.toVersion(targetVersion)
            targetCompatibility = JavaVersion.toVersion(targetVersion)
        }
    }

    group = "com.teamwizardry.librarianlib"

    sourceSets {
        testmod {
            compileClasspath += main.compileClasspath
            runtimeClasspath += main.runtimeClasspath
        }
    }

    task runTestmodClient(type: RunClientTask) {
        classpath sourceSets.testmod.runtimeClasspath
    }

    task runTestmodServer(type: RunServerTask) {
        classpath sourceSets.testmod.runtimeClasspath
    }

    dependencies {
        minecraft "com.mojang:minecraft:1.16.4"
        mappings "net.fabricmc:yarn:1.16.4+build.7:v2"

        modImplementation("net.fabricmc:fabric-loader:0.10.8")
        modImplementation("net.fabricmc.fabric-api:fabric-api:0.29.0+1.16")
        modImplementation("net.fabricmc:fabric-language-kotlin:1.4.21+build.1")
    }

    version = 1.0


    configurations {
        dev
    }

    loom {
        shareCaches = true
    }

    repositories {
        mavenLocal()
    }

    jar {
        classifier = "dev"
    }

    afterEvaluate {
        remapJar {
            input = file("${project.buildDir}/libs/$archivesBaseName-${version}-dev.jar")
            archiveName = "${archivesBaseName}-${version}.jar"
        }

        artifacts {
            dev file: file("${project.buildDir}/libs/$archivesBaseName-${version}-dev.jar"), type: "jar", builtBy: jar
        }

        processResources {
            inputs.property "version", project.version

            from(sourceSets.main.resources.srcDirs) {
                include "fabric.mod.json"
                expand "version": project.version
            }

            from(sourceSets.main.resources.srcDirs) {
                exclude "fabric.mod.json"
            }
        }

    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier = "sources"
        from sourceSets.main.allSource
    }
}